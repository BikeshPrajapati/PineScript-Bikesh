import TradingView/Strategy/3

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© prajapatibikesh29
//@version=5
strategy("Candle Stick - Weekdays Analysis", overlay = true, shorttitle = "CS- A", max_bars_back = 1000)
// Define gap size (you can adjust this value)
ATRLength = input.int(defval =  14, title = "ATR length " , minval = 9, maxval = 100 , step = 2, inline = 'Length', group ="Length")
EMALength = input.int(defval =  9, title = "EMA length" , minval = 9, maxval = 200 , step = 2, inline = 'Length', group ="Length")
RSILength = input.int(defval =  9, title = "RSI length" , minval = 1, maxval = 30 , step = 2, inline = 'Length', group ="Length")
gapSize = input.float(defval = 0.15, title="Gap Size", minval= 0.1, step = 0.1,inline = 'Length', group ="Length")

//user input for the number of instaces to check for green and red bars in given time frame
LookbackBars =  input.int(title=" Bar Length", defval = 100, minval = 100, maxval = 1000, step = 10, inline = 'length', group = " Bar Numbers ")

var varBlMonTotal = input.bool(true, "Monday Total On/Off", group = "Weekday", inline = "days")
var varBlTueTotal = input.bool(true, "Tuesday Total On/Off", group = "Weekday",inline = "days")
var varBlWedTotal = input.bool(true, "Wednesday Total On/Off", group = "Weekday",inline = "days")
var varBlThuTotal = input.bool(true, "Thursday Total On/Off", group = "Weekday",inline = "days")
var varBlFriTotal = input.bool(true, "Friday Total On/Off", group = "Weekday",inline = "days")
var varBlEMA = input.bool(true, "EMA ", group = "Indicator", inline = "indicator")
var varBlRSI = input.bool(true, "RSI ", group = "Indicator", inline = "indicator")
var varBlGapUp = input.bool(true, "Gap Up", group = "Gap", inline = "GAP")
var varBlGapDown = input.bool(true, "Gap Down", group = "Gap", inline = "GAP")


//ATR size for the body 
ATR(length)=>
    atr = ta.sma(math.abs(open - close),length)
BodyRange() =>
	math.abs(close - open)

////////////////////////////////////////////////////   
// Function to check if a bar is red and green
/////////////////////////////////////////////////////
isRedCandle() =>
    close < open
isGreenCandle() =>
    close > open

//Funtion to check the bar has top wick and bottom wick

isTopwick() =>
    math.abs(high - math.max(open, close))  > 0.25 * ATR(ATRLength)

isBottomwick() =>
   math.abs(math.min(open, close) - low) > 0.25 * ATR(ATRLength)

///////////////////////////////////////////////////////
//Check for the every days of trade during Weekday
////////////////////////////////////////////////////////
isMonday() =>
    dayofweek==dayofweek.monday
isTuesday() =>
    dayofweek==dayofweek.tuesday
isWednesday() =>
    dayofweek==dayofweek.wednesday
isThursday() =>
    dayofweek==dayofweek.thursday
isFriday() =>
    dayofweek==dayofweek.friday

//Fucntion to check the bar above ema or below ema
isAboveEMA() =>
    ema_a = ta.ema(close, EMALength) > close
isBelowEMA() =>
    ema_b = ta.ema(close, EMALength) < close

isRSIHigh() =>
    rsi_value = ta.rsi(close, RSILength)
    rsi_h = rsi_value >= 70
isRSILow() =>
    rsi_value = ta.rsi(close, RSILength)
    rsi_l = rsi_value <= 30
isGapUp() =>
    math.abs(open- close[1]) > gapSize * ATR(ATRLength) and open > close[1] 
isGapDown()=>
    math.abs(close[1] - close) > gapSize * ATR(ATRLength) and open < close[1] 

// create variable for the postion of table x and y
tableYposInput  = input.string("top", "Panel position", options = ["top", "middle", "bottom"])
tableXposInput  = input.string("right", "", options = ["left", "center", "right"])

//create a new table with height adn width of 10,7
var table TTM   = table.new(tableYposInput + "_" + tableXposInput, 8, 15 , border_width=1)
if barstate.isconfirmed
    table.cell(TTM, 0, 0, "Candle  Analysis", text_color = color.new(color.white, 0), bgcolor = color.new(color.gray, 50))
    table.cell(TTM, 1, 0, "Red", text_color = color.white, bgcolor =color.new(color.red, 50))
    table.cell(TTM, 2, 0, "Green", text_color = color.white, bgcolor =color.new(color.green, 50))
    table.cell(TTM, 3, 0, "Small", text_color = color.white, bgcolor =color.new(color.yellow, 50))
    table.cell(TTM, 4, 0, "Avg", text_color = color.white, bgcolor =color.new(color.orange, 50))
    table.cell(TTM, 5, 0, "large", text_color = color.white, bgcolor =  color.new(color.blue, 50))
    table.cell(TTM, 6, 0, "Top", text_color = color.white, bgcolor = color.new(color.silver, 50) )
    table.cell(TTM, 7, 0, "Bottom", text_color = color.white, bgcolor = color.new(color.gray, 50) )
TC = color.black
G_BG = color.green
R_BG = color.red
TS = 5 

// for total counts for Friday charts
total_red  = 0.0
total_green = 0.0
total_small = 0.0
total_avg = 0.0
total_large = 0.0
total_top = 0.0
total_bottom = 0.0
// for total counts for monday total
M_total_red  = 0.0
M_total_green = 0.0
M_total_small = 0.0
M_total_avg = 0.0
M_total_large = 0.0
M_total_top = 0.0
M_total_bottom = 0.0
// for total counts for tuesday
TU_total_red  = 0.0
TU_total_green = 0.0
TU_total_small = 0.0
TU_total_avg = 0.0
TU_total_large = 0.0
TU_total_top = 0.0
TU_total_bottom = 0.0
//for total counts for wednesday
W_total_red  = 0.0
W_total_green = 0.0
W_total_small = 0.0
W_total_avg = 0.0
W_total_large = 0.0
W_total_top = 0.0
W_total_bottom = 0.0
//for total counts for thursday
TH_total_red  = 0.0
TH_total_green = 0.0
TH_total_small = 0.0
TH_total_avg = 0.0
TH_total_large = 0.0
TH_total_top = 0.0
TH_total_bottom = 0.0
//For Ema above and below red and green counts 
EMA_A_red = 0.0
EMA_A_green = 0.0
EMA_A_small = 0.0
EMA_A_avg = 0.0
EMA_A_large = 0.0
EMA_A_top =0.0
EMA_A_bottom = 0.0
EMA_B_red = 0.0
EMA_B_green = 0.0
EMA_B_small = 0.0
EMA_B_avg = 0.0
EMA_B_large = 0.0
EMA_B_top =0.0
EMA_B_bottom = 0.0
//For RSI High and low red and green counts 
RSI_H_red = 0.0
RSI_H_green = 0.0
RSI_H_small = 0.0
RSI_H_avg = 0.0
RSI_H_large = 0.0
RSI_H_top =0.0
RSI_H_bottom = 0.0
RSI_L_red = 0.0
RSI_L_green = 0.0
RSI_L_small = 0.0
RSI_L_avg = 0.0
RSI_L_large = 0.0
RSI_L_top =0.0
RSI_L_bottom = 0.0

// GAP Up  and Down counts 
GAP_U_red = 0.0
GAP_U_green = 0.0
GAP_U_small = 0.0
GAP_U_avg = 0.0
GAP_U_large = 0.0
GAP_U_top =0.0
GAP_U_bottom = 0.0
GAP_D_red = 0.0
GAP_D_green = 0.0
GAP_D_small = 0.0
GAP_D_avg = 0.0
GAP_D_large = 0.0
GAP_D_top =0.0
GAP_D_bottom = 0.0


for i = 0 to LookbackBars by 1
          //calculate the size of candle
    ATR = ATR(ATRLength)[i]
    candleSize = BodyRange()[i]
///////////////////////// For  Monday Analysis /////////////////////////////////////
    if isMonday()[i] and varBlMonTotal == true 
        // Determine candle color
        if isGreenCandle()[i]
            M_total_green += 1
        else if isRedCandle()[i]   // red counts
            M_total_red += 1   
        // Determine candle size category
        if candleSize < ATR * 0.75
            M_total_small += 1
        else if candleSize >= ATR * 0.75 and candleSize <= ATR * 1.25 
            M_total_avg += 1
        else if  candleSize > ATR * 1.25
            M_total_large += 1
            // Determine wick location
        if isTopwick()[i]
            M_total_top += 1
        if isBottomwick()[i] 
            M_total_bottom += 1
 
///////////////////////// For  Tuesday Analysis /////////////////////////////////////
    if isTuesday()[i] and varBlTueTotal == true

        // Determine candle color
        if isGreenCandle()[i]
            TU_total_green += 1
        else if isRedCandle()[i]   // red counts
            TU_total_red += 1   
        // Determine candle size category
        if candleSize < ATR * 0.75
            TU_total_small += 1
        else if candleSize >= ATR * 0.75 and candleSize <= ATR * 1.25 
            TU_total_avg += 1
        else if  candleSize > ATR * 1.25
            TU_total_large += 1
            // Determine wick location
        if isTopwick()[i]
            TU_total_top += 1
        if isBottomwick()[i] 
            TU_total_bottom += 1
   
///////////////////////// For  Wednesday Analysis /////////////////////////////////////
    if isWednesday()[i] and varBlWedTotal == true

        // Determine candle color
        if isGreenCandle()[i]
            W_total_green += 1
        else if isRedCandle()[i]   // red counts
            W_total_red += 1   
        // Determine candle size category
        if candleSize < ATR * 0.75
            W_total_small += 1
        else if candleSize >= ATR * 0.75 and candleSize <= ATR * 1.25 
            W_total_avg += 1
        else if  candleSize > ATR * 1.25
            W_total_large += 1
            // Determine wick location
        if isTopwick()[i]
            W_total_top += 1
        if isBottomwick()[i] 
            W_total_bottom += 1


///////////////////////// For  Thursday Analysis /////////////////////////////////////
    if isThursday()[i] and varBlThuTotal == true

        // Determine candle color
        if isGreenCandle()[i]
            TH_total_green += 1
        else if isRedCandle()[i]   // red counts
            TH_total_red += 1   
        // Determine candle size category
        if candleSize < ATR * 0.75
            TH_total_small += 1
        else if candleSize >= ATR * 0.75 and candleSize <= ATR *  1.25 
            TH_total_avg += 1
        else if  candleSize > ATR * 1.25
            TH_total_large += 1
            // Determine wick location
        if isTopwick()[i]
            TH_total_top += 1
        if isBottomwick()[i] 
            TH_total_bottom += 1


    if isFriday()[i] and  varBlFriTotal == true 
        // Determine candle color
        if isGreenCandle()[i]
            total_green += 1
        else if isRedCandle()[i]   // red count
            total_red += 1   
        // Determine candle size category
        if candleSize < ATR * 0.75
            total_small += 1
        else if candleSize >= ATR * 0.75 and candleSize <= ATR * 1.25
            total_avg += 1
        else if  candleSize > ATR * 1.25
            total_large += 1
            // Determine wick location
        if isTopwick()[i]
            total_top += 1
        if isBottomwick()[i] 
            total_bottom += 1


    if isAboveEMA()[i] and varBlEMA == true
        if isRedCandle()[i]
            EMA_A_red += 1
        else if  isGreenCandle()[i]
            EMA_A_green += 1
        if  candleSize < ATR * 0.75
            EMA_A_small += 1
        else if candleSize >= ATR * 0.75 and candleSize <= ATR *  1.25
            EMA_A_avg += 1
        else if candleSize > ATR * 1.25
            EMA_A_large += 1
        if isTopwick()[i]
            EMA_A_top += 1
        if isBottomwick()[i]
            EMA_A_bottom += 1
    if isBelowEMA()[i] and varBlEMA == true

        if  isRedCandle()[i]
            EMA_B_red+= 1
        else if isGreenCandle()[i]
            EMA_B_green += 1 
        if candleSize < ATR * 0.75
            EMA_B_small += 1
        else if candleSize >= ATR * 0.75 and candleSize <= ATR *  1.25
            EMA_B_avg += 1
        else if  candleSize > ATR * 1.25
            EMA_B_large += 1
        if  isTopwick()[i]
            EMA_B_top += 1
        if isBottomwick()[i]
            EMA_B_bottom += 1

    if isRSIHigh()[i] and varBlRSI == true
        if isRedCandle()[i]
            RSI_H_red += 1
        else if isGreenCandle()[i]
            RSI_H_green += 1
        if candleSize < ATR * 0.75
            RSI_H_small += 1
        else if candleSize >= ATR * 0.75 and candleSize <= ATR *  1.25
            RSI_H_avg += 1
        else if candleSize > ATR * 1.25
            RSI_H_large += 1
        if  isTopwick()[i]
            RSI_H_top += 1
        if isBottomwick()[i]
            RSI_H_bottom += 1

    if isRSILow()[i] and varBlRSI == true
        if isRedCandle()[i]
            RSI_L_red+= 1
        else if isGreenCandle()[i]
            RSI_L_green += 1 
        if candleSize < ATR * 0.75
            RSI_L_small += 1
        else if  candleSize >= ATR * 0.75 and candleSize <= ATR *  1.25
            RSI_L_avg += 1
        else if candleSize > ATR * 1.25
            RSI_L_large += 1
        if isTopwick()[i]
            RSI_L_top += 1
        if isBottomwick()[i]
            RSI_L_bottom += 1
  
    if isGapUp()[i] and varBlGapUp == true

        if  isRedCandle()[i]
            GAP_U_red += 1
        else if  isGreenCandle()[i]
            GAP_U_green += 1
        if candleSize < ATR * 0.75
            GAP_U_small += 1
        else if candleSize >= ATR * 0.75 and candleSize <= ATR *  1.25
            GAP_U_avg += 1
        else if candleSize > ATR * 1.25
            GAP_U_large += 1
        if  isTopwick()[i]
            GAP_U_top += 1
        if isBottomwick()[i]
            GAP_U_bottom += 1

    if isGapDown()[i]  and varBlGapDown == true
        if isRedCandle()[i]
            GAP_D_red += 1
        else if isGreenCandle()[i]
            GAP_D_green += 1
        if candleSize < ATR * 0.75
            GAP_D_small += 1
        else if candleSize >= ATR * 0.75 and candleSize <= ATR *  1.25
            GAP_D_avg += 1
        else if  candleSize > ATR * 1.25
            GAP_D_large += 1
        if  isTopwick()[i]
            GAP_D_top += 1
        if  isBottomwick()[i]
            GAP_D_bottom += 1

table.cell(TTM, 0, 1, "Mon Total", text_color = color.new(color.white, 0), bgcolor = color.new(color.teal, 50))
table.cell(TTM, 1, 1, str.tostring (M_total_red), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 2, 1, str.tostring (M_total_green), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 3, 1, str.tostring (M_total_small), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 4, 1, str.tostring (M_total_avg), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 5, 1, str.tostring (M_total_large), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 6, 1, str.tostring (M_total_top), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 7, 1, str.tostring (M_total_bottom), text_color = TC, bgcolor = color.aqua)  

table.cell(TTM, 0, 2, "Tue Total", text_color = color.new(color.white, 0), bgcolor = color.new(color.teal, 50))
table.cell(TTM, 1, 2, str.tostring (TU_total_red), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 2, 2, str.tostring (TU_total_green), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 3, 2, str.tostring (TU_total_small), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 4, 2, str.tostring (TU_total_avg), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 5, 2, str.tostring (TU_total_large), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 6, 2, str.tostring (TU_total_top), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 7, 2, str.tostring (TU_total_bottom), text_color = TC, bgcolor = color.aqua)

      
table.cell(TTM, 0, 3, "Wed Total", text_color = color.new(color.white, 0), bgcolor = color.new(color.teal, 50))
table.cell(TTM, 1,3, str.tostring (W_total_red), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 2,3, str.tostring (W_total_green), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 3,3, str.tostring (W_total_small), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 4, 3, str.tostring (W_total_avg), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 5,3, str.tostring (W_total_large), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 6,3, str.tostring (W_total_top), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 7,3, str.tostring (W_total_bottom), text_color = TC, bgcolor = color.aqua)

table.cell(TTM, 0, 4, "Thu Total", text_color = color.new(color.white, 0), bgcolor = color.new(color.teal, 50))
table.cell(TTM, 1, 4, str.tostring (TH_total_red), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 2, 4, str.tostring (TH_total_green), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 3, 4, str.tostring (TH_total_small), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 4, 4, str.tostring (TH_total_avg), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 5, 4, str.tostring (TH_total_large), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 6, 4, str.tostring (TH_total_top), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 7, 4, str.tostring (TH_total_bottom), text_color = TC, bgcolor = color.aqua)

table.cell(TTM, 0, 5,"Fri Total", text_color = color.new(color.white, 0), bgcolor = color.new(color.teal, 50))
table.cell(TTM, 1, 5, str.tostring (total_red), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 2, 5, str.tostring (total_green), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 3, 5, str.tostring (total_small), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 4, 5, str.tostring (total_avg), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 5, 5, str.tostring (total_large), text_color = TC, bgcolor = color.aqua )
table.cell(TTM, 6, 5, str.tostring (total_top), text_color = TC, bgcolor = color.aqua)
table.cell(TTM, 7, 5, str.tostring (total_bottom), text_color = TC, bgcolor = color.aqua)

table.cell(TTM, 0, 7, "EMA Above Bar", text_color = color.new(color.white, 0), bgcolor = color.new(color.teal, 50))
table.cell(TTM, 1, 7, str.tostring (EMA_A_red), text_color = TC, bgcolor = color.rgb(247, 131, 131) )
table.cell(TTM, 2, 7, str.tostring (EMA_A_green), text_color = TC, bgcolor = color.rgb(130, 187, 132))
table.cell(TTM, 3, 7, str.tostring (EMA_A_small), text_color = TC, bgcolor = color.rgb(243, 242, 177))
table.cell(TTM, 4, 7, str.tostring (EMA_A_avg), text_color = TC, bgcolor = color.rgb(245, 224, 184))
table.cell(TTM, 5, 7, str.tostring (EMA_A_large), text_color = TC, bgcolor = color.rgb(186, 195, 248))
table.cell(TTM, 6, 7, str.tostring (EMA_A_top), text_color = TC, bgcolor = color.rgb(145, 144, 144))
table.cell(TTM, 7, 7, str.tostring (EMA_A_bottom), text_color = TC, bgcolor = color.rgb(101, 101, 102))
            //next ROW
table.cell(TTM, 0, 8, "EMA Below Bar", text_color = color.new(color.white, 0), bgcolor = color.new(color.teal, 50))
table.cell(TTM, 1, 8, str.tostring (EMA_B_red), text_color = TC, bgcolor = color.rgb(247, 209, 209) )
table.cell(TTM, 2, 8, str.tostring (EMA_B_green), text_color = TC, bgcolor = color.rgb(182, 211, 183))
table.cell(TTM, 3, 8, str.tostring (EMA_B_small), text_color = TC, bgcolor = color.rgb(243, 242, 177))
table.cell(TTM, 4, 8, str.tostring (EMA_B_avg), text_color = TC, bgcolor = color.rgb(245, 224, 184))
table.cell(TTM, 5, 8, str.tostring (EMA_B_large), text_color = TC, bgcolor = color.rgb(186, 195, 248))
table.cell(TTM, 6, 8, str.tostring (EMA_B_top), text_color = TC, bgcolor = color.rgb(145, 144, 144))
table.cell(TTM, 7, 8, str.tostring (EMA_B_bottom), text_color = TC, bgcolor = color.rgb(101, 101, 102))

table.cell(TTM, 0, 9, "RSI High 70", text_color = color.new(color.white, 0), bgcolor = color.new(color.teal , 50))
table.cell(TTM, 1, 9, str.tostring (RSI_H_red), text_color = TC, bgcolor =color.rgb(247, 131, 131) )
table.cell(TTM, 2, 9, str.tostring (RSI_H_green), text_color = TC, bgcolor = color.rgb(130, 187, 132))
table.cell(TTM, 3, 9, str.tostring (RSI_H_small), text_color = TC, bgcolor = color.rgb(243, 242, 177))
table.cell(TTM, 4, 9, str.tostring (RSI_H_avg), text_color = TC, bgcolor = color.rgb(245, 224, 184))
table.cell(TTM, 5, 9, str.tostring (RSI_H_large), text_color = TC, bgcolor = color.rgb(186, 195, 248))
table.cell(TTM, 6, 9, str.tostring (RSI_H_top), text_color = TC, bgcolor = color.rgb(145, 144, 144))
table.cell(TTM, 7, 9, str.tostring (RSI_H_bottom), text_color = TC, bgcolor = color.rgb(101, 101, 102))
            //next ROW
table.cell(TTM, 0, 10, "RSI Low 30", text_color = color.new(color.white, 0), bgcolor = color.new(color.teal, 50))
table.cell(TTM, 1, 10, str.tostring (RSI_L_red), text_color = TC, bgcolor = color.rgb(247, 209, 209) )
table.cell(TTM, 2, 10, str.tostring (RSI_L_green), text_color = TC, bgcolor = color.rgb(182, 211, 183))
table.cell(TTM, 3, 10, str.tostring (RSI_L_small), text_color = TC, bgcolor = color.rgb(243, 242, 177))
table.cell(TTM, 4, 10, str.tostring (RSI_L_avg), text_color = TC, bgcolor = color.rgb(245, 224, 184))
table.cell(TTM, 5, 10, str.tostring (RSI_L_large), text_color = TC, bgcolor = color.rgb(186, 195, 248))
table.cell(TTM, 6, 10, str.tostring (RSI_L_top), text_color = TC, bgcolor = color.rgb(145, 144, 144))
table.cell(TTM, 7, 10, str.tostring (RSI_L_bottom), text_color = TC, bgcolor = color.rgb(101, 101, 102))

table.cell(TTM, 0, 11, "Gap Up", text_color = color.new(color.white, 0), bgcolor = color.new(color.teal , 50))
table.cell(TTM, 1, 11, str.tostring (GAP_U_red), text_color = TC, bgcolor =color.rgb(247, 131, 131) )
table.cell(TTM, 2, 11, str.tostring (GAP_U_green), text_color = TC, bgcolor = color.rgb(130, 187, 132))
table.cell(TTM, 3, 11, str.tostring (GAP_U_small), text_color = TC, bgcolor = color.rgb(243, 242, 177))
table.cell(TTM, 4, 11, str.tostring (GAP_U_avg), text_color = TC, bgcolor = color.rgb(245, 224, 184))
table.cell(TTM, 5, 11, str.tostring (GAP_U_large), text_color = TC, bgcolor = color.rgb(186, 195, 248))
table.cell(TTM, 6, 11, str.tostring (GAP_U_top), text_color = TC, bgcolor = color.rgb(145, 144, 144))
table.cell(TTM, 7, 11, str.tostring (GAP_U_bottom), text_color = TC, bgcolor = color.rgb(101, 101, 102))

table.cell(TTM, 0, 12, "Gap Down", text_color = color.new(color.white, 0), bgcolor = color.new(color.teal , 50))
table.cell(TTM, 1, 12, str.tostring (GAP_D_red), text_color = TC, bgcolor =color.rgb(247, 209, 209) )
table.cell(TTM, 2, 12, str.tostring (GAP_D_green), text_color = TC, bgcolor = color.rgb(182, 211, 183))
table.cell(TTM, 3, 12, str.tostring (GAP_D_small), text_color = TC, bgcolor = color.rgb(243, 242, 177))
table.cell(TTM, 4, 12, str.tostring (GAP_D_avg), text_color = TC, bgcolor = color.rgb(245, 224, 184))
table.cell(TTM, 5, 12, str.tostring (GAP_D_large), text_color = TC, bgcolor = color.rgb(186, 195, 248))
table.cell(TTM, 6, 12, str.tostring (GAP_D_top), text_color = TC, bgcolor = color.rgb(145, 144, 144))
table.cell(TTM, 7, 12, str.tostring (GAP_D_bottom), text_color = TC, bgcolor = color.rgb(101, 101, 102))


/////////////////////////////////    BACK TESTING  //////////////////////////////////////////////////////////////////

EMA = ta.ema(close,EMALength)


RSI = ta.rsi(close, RSILength)
D_RSI = request.security(syminfo.tickerid, 'D', RSI)

Rsi_High =  isRSIHigh()
Rsi_Low= isRSILow()

// Determine if it's 9:31 AM
is_931 = (hour == 9 and minute == 31)
// Determine if it's 3:49 PM
is_349 = (hour == 15 and minute == 49)

if is_931 and D_RSI > 70
    strategy.entry(id = "buy", direction = strategy.long, qty = 1)
if is_349 and strategy.position_size != 0 
    strategy.entry(id = "sell", direction = strategy.short, qty = 1)

if is_931 and D_RSI < 30
    strategy.entry(id = "sell", direction = strategy.short, qty = 1)
if is_349  and strategy.position_size != 0
    strategy.entry(id = "buy", direction = strategy.long, qty = 1)


///Plot 
bgcolor(dayofweek==dayofweek.friday? color.new(color.blue, 70) : na)
plot(ta.ema(close, EMALength), color= color.white, title = "EMA - 9")
// plot(ta.rsi(close, RSILength), color = color.yellow , title = "RSI - 9 ")

